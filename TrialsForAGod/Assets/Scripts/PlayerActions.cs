//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Scripts/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""PlayerControls"",
            ""id"": ""d9d000c4-090d-4f03-ad1b-38e8825c092d"",
            ""actions"": [
                {
                    ""name"": ""PlayerMovement"",
                    ""type"": ""Value"",
                    ""id"": ""73c66cd7-0eef-439d-b193-e3de9fbe63ca"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlayerLightAttack"",
                    ""type"": ""Button"",
                    ""id"": ""c7cdd124-a869-4754-bc94-7e9a01801060"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerHeavyAttack"",
                    ""type"": ""Button"",
                    ""id"": ""bc8d928e-a9e8-42bb-94c1-972c5f52a4b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5c18658c-2d8e-455b-8833-454f119246b6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a67ab89c-afef-45d7-b786-56452603a407"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a59574bf-08e8-47f7-8320-e70e7d267278"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9816e93d-92ca-4924-9dbc-4f2e388fc794"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9f1f1c49-7914-4ed1-ab0c-a538018414d0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fb2ee28c-eb23-4044-8bef-3facb25d9ea5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerLightAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba0eb0d5-ef5f-4358-ac9b-7845447a879c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerHeavyAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""All"",
            ""bindingGroup"": ""All"",
            ""devices"": []
        }
    ]
}");
        // PlayerControls
        m_PlayerControls = asset.FindActionMap("PlayerControls", throwIfNotFound: true);
        m_PlayerControls_PlayerMovement = m_PlayerControls.FindAction("PlayerMovement", throwIfNotFound: true);
        m_PlayerControls_PlayerLightAttack = m_PlayerControls.FindAction("PlayerLightAttack", throwIfNotFound: true);
        m_PlayerControls_PlayerHeavyAttack = m_PlayerControls.FindAction("PlayerHeavyAttack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControls
    private readonly InputActionMap m_PlayerControls;
    private IPlayerControlsActions m_PlayerControlsActionsCallbackInterface;
    private readonly InputAction m_PlayerControls_PlayerMovement;
    private readonly InputAction m_PlayerControls_PlayerLightAttack;
    private readonly InputAction m_PlayerControls_PlayerHeavyAttack;
    public struct PlayerControlsActions
    {
        private @PlayerActions m_Wrapper;
        public PlayerControlsActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerMovement => m_Wrapper.m_PlayerControls_PlayerMovement;
        public InputAction @PlayerLightAttack => m_Wrapper.m_PlayerControls_PlayerLightAttack;
        public InputAction @PlayerHeavyAttack => m_Wrapper.m_PlayerControls_PlayerHeavyAttack;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlsActions instance)
        {
            if (m_Wrapper.m_PlayerControlsActionsCallbackInterface != null)
            {
                @PlayerMovement.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnPlayerMovement;
                @PlayerMovement.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnPlayerMovement;
                @PlayerMovement.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnPlayerMovement;
                @PlayerLightAttack.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnPlayerLightAttack;
                @PlayerLightAttack.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnPlayerLightAttack;
                @PlayerLightAttack.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnPlayerLightAttack;
                @PlayerHeavyAttack.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnPlayerHeavyAttack;
                @PlayerHeavyAttack.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnPlayerHeavyAttack;
                @PlayerHeavyAttack.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnPlayerHeavyAttack;
            }
            m_Wrapper.m_PlayerControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PlayerMovement.started += instance.OnPlayerMovement;
                @PlayerMovement.performed += instance.OnPlayerMovement;
                @PlayerMovement.canceled += instance.OnPlayerMovement;
                @PlayerLightAttack.started += instance.OnPlayerLightAttack;
                @PlayerLightAttack.performed += instance.OnPlayerLightAttack;
                @PlayerLightAttack.canceled += instance.OnPlayerLightAttack;
                @PlayerHeavyAttack.started += instance.OnPlayerHeavyAttack;
                @PlayerHeavyAttack.performed += instance.OnPlayerHeavyAttack;
                @PlayerHeavyAttack.canceled += instance.OnPlayerHeavyAttack;
            }
        }
    }
    public PlayerControlsActions @PlayerControls => new PlayerControlsActions(this);
    private int m_AllSchemeIndex = -1;
    public InputControlScheme AllScheme
    {
        get
        {
            if (m_AllSchemeIndex == -1) m_AllSchemeIndex = asset.FindControlSchemeIndex("All");
            return asset.controlSchemes[m_AllSchemeIndex];
        }
    }
    public interface IPlayerControlsActions
    {
        void OnPlayerMovement(InputAction.CallbackContext context);
        void OnPlayerLightAttack(InputAction.CallbackContext context);
        void OnPlayerHeavyAttack(InputAction.CallbackContext context);
    }
}
